openapi: "3.0.2"
info:
  title: "API Title"
  version: "1.0"
servers:
  - url: "http://46.151.30.82:8080/api/v1"
    description: prod
  - url: "http://46.151.30.82:8081/api/v1"
    description: test
  - url: "http://0.0.0.0:8080/api/v1"
    description: localhost

components:
  schemas:
    UserAuthRequest:
      properties:
        username:
          type: string
        password:
          type: string

    AuthUserResponse:
      properties:
        uuid:
          type: string
        username:
          type: string
        nikname:
          type: string
        token:
          type: string

    ApiKeyHeader:
      properties:
        x-api-key:
          type: string

    HelloResponse:
      properties:
        text:
          type: string

    ErrorResponse:
      properties:
        messageCode:
          type: integer
        message:
          type: string

paths:
  /passport/registration:
    post:
      tags:
        - Authentication
      summary: registration
      description: registration
      parameters:
        - name: "api"
          in: header
          required: true
          description: to get access to main functionality,
          schema: {
            $ref: '#/components/schemas/ApiKeyHeader'
          }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuthRequest'
      responses:
        '200':
          description: OK
        '401':
          description: |
            Unauthorized \
            messageCode = 2 \
            message = "Api Key is Invalid"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '411':
          description: |
            Invalid password or username format \
            messageCode = 102, message = "Password not in right format" \
            messageCode = 104, message = "Username is invalid"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: |
            Conflict \
            messageCode = 103 \
            message = "User with this username is already exist"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: |
            Internal Server Error \
            messageCode = 100 \
            message = "Error while saving user, try again later"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /passport/login:
    post:
      tags:
        - Authentication
      summary: authentication
      description: authentication
      parameters:
        - name: "api"
          in: header
          required: true
          description: to get access to main functionality,
          schema: {
            $ref: '#/components/schemas/ApiKeyHeader'
          }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuthRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthUserResponse'
        '412':
          description: |
            PreconditionFailed \
            messageCode = "101"
            message = "Password is not valid"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: |
            Conflict \
            messageCode = 103 \
            message = "User with this username is already exist"

  /hello:
    get:
      tags:
        - Test
      summary: Gets hello test string
      description: >
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'


  /hello/{username}:
    summary: Test method
    get:
      tags:
        - Test
      summary: Gets hello test string with name
      description: >
        Method for test api - always return hello world with input name.

      parameters:
        - name: username
          in: path
          required: true
          schema: { }

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'